# -*- coding: utf-8 -*-
"""Spam mail prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b8L5ZNPGoqQtcnYMm91o6BC4C85zuhfQ

Importing the libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Loading the dataset"""

mail_data = pd.read_csv('/content/mail_data (2).csv')

mail_data.shape

mail_data.head()

#checking null spaces in dataset

mail_data.isnull().sum()

mail_data.info()

"""Label encoding"""

#spam mail as 0 and ham mail as 1

mail_data.loc[mail_data['Category'] == 'spam', 'Category'] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category'] = 1

mail_data.head()

"""Spam = 0, Ham = 1"""

#seperate the dataset

X = mail_data['Message']
Y = mail_data['Category']

print(X)

print(Y)

"""Data splitting into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 3)

X.shape
print(X_train.shape)
print(X_test.shape)

"""Feature extraction"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Assuming X_train and X_test are lists of strings representing email text
# Assuming Y_train and Y_test are lists of corresponding labels (0 for spam, 1 for ham)

# Feature extraction using TF-IDF
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

# Transforming the text data to feature vectors
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Converting Y_train and Y_test values to integers
Y_train = [int(label) for label in Y_train]
Y_test = [int(label) for label in Y_test]

print(X_train_features)

"""MODEL TRAINING - LOGISTIC REGRESSION"""

model = LogisticRegression()

model.fit(X_train_features, Y_train)

"""Evaluation phase"""

prediction_on_training_data = model.predict(X_train_features)
prediction_on_training_data

accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data )

print(accuracy_on_training_data)

"""Build a predictive system"""

input_mail = ["We want to announce that, there is twenty percent discount on our product. Buy immediately"]

#convert mail into vectors
input_mail_features = feature_extraction.transform(input_mail)

#making prediction
prediction = model.predict(input_mail_features)

if(prediction[0]==1):
  print('Ham mail')

else:
  print("Spam mail")

